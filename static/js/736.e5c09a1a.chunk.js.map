{"version":3,"file":"static/js/736.e5c09a1a.chunk.js","mappings":"8SACAA,EAAAA,GAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAkB,mCAAG,oGACPF,EAAAA,GAAAA,IAAA,qCAAwCC,IADjC,cACxBE,EADwB,yBAEvBA,EAASC,KAAKC,SAFS,2CAAH,qDAKlBC,EAAgB,mCAAG,WAAOC,GAAP,uFACPP,EAAAA,GAAAA,IAAA,+BAAkCC,EAAlC,iCAAkEM,EAAlE,YADO,cACxBJ,EADwB,yBAEvBA,EAASC,KAAKC,SAFS,2CAAH,sDAKhBG,EAAiB,mCAAG,WAAMC,GAAN,uFACNT,EAAAA,GAAAA,IAAA,gBAAmBS,EAAnB,oBAAiCR,EAAjC,oBADM,cACvBE,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKjBM,EAAc,mCAAG,WAAOD,GAAP,uFACHT,EAAAA,GAAAA,IAAA,gBAAmBS,EAAnB,4BAAyCR,EAAzC,oBADG,cACpBE,EADoB,yBAEnBA,EAASC,KAAKO,MAFK,2CAAH,sDAKdC,EAAiB,mCAAE,WAAOH,GAAP,uFACLT,EAAAA,GAAAA,IAAA,gBAAmBS,EAAnB,4BAAyCR,EAAzC,2BADK,cACtBE,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAF,qD,0HCtBjBQ,EAAWC,EAAAA,GAAAA,GAAH,iQAYRC,EAAWD,EAAAA,GAAAA,GAAH,kLAKRE,EAAUF,EAAAA,GAAAA,IAAH,kR,2BCkBpB,EA9Ba,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOR,EAAP,KAAaS,EAAb,KAKA,OAJAC,EAAAA,EAAAA,YAAU,YACRX,EAAAA,EAAAA,IAAeO,GAASK,KAAKF,EAC9B,GAAE,CAACH,KAGF,8BACGN,IACC,SAACE,EAAD,UACGF,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcjB,EAAlC,EAAkCA,GAAlC,OACR,UAACM,EAAD,WACGW,IACC,SAACV,EAAD,CACEW,IAAG,0CAAqCD,GACxCE,IAAKJ,KAGPE,IAAgB,SAACV,EAAD,CAASW,IAAKE,EAAiBD,IAAKJ,KACtD,uBAAIA,KACJ,uCAAeC,OATFhB,EADP,OAiBnB,C","sources":["api/api-movies.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\naxios.defaults.baseURL = 'https://api.themoviedb.org/3'\nconst API_KEY = '3e23bc4805601b1fb14b53b3b99dcd05'\n\nexport const fetchPopularMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`)\n    return response.data.results;\n}\n\nexport const fetchSearchMovie = async (query) => {\n  const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1`);\n  return response.data.results;\n}\n\nexport const fetchMovieDetails = async(id) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`)\n    return response.data;\n}\n\nexport const fetchMovieCast = async (id) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`)\n    return response.data.cast\n}\n\nexport const fetchMovieReviews =async (id) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n    return response.data.results\n}","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 32px);\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const CastItem = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\nexport const CastImg = styled.img`\n  display: block;\n  max-width: 100%;\n  height: 460px;\n  width: 100%;\n  padding-bottom: 10px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n","import { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport { fetchMovieCast } from 'api/api-movies';\nimport { useEffect } from 'react';\nimport { CastImg, CastItem, CastList } from './Cast.styled';\nimport potoPlaceholder from '../img/photo_placeholder.png';\nimport { useParams } from 'react-router-dom';\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  useEffect(() => {\n    fetchMovieCast(movieId).then(setCast);\n  }, [movieId]);\n\n  return (\n    <>\n      {cast && (\n        <CastList>\n          {cast.map(({ name, character, profile_path, id }) => (\n            <CastItem key={id}>\n              {profile_path && (\n                <CastImg\n                  src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                  alt={name}\n                />\n              )}\n              {!profile_path && <CastImg src={potoPlaceholder} alt={name} />}\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </CastItem>\n          ))}\n        </CastList>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n\n// Cast.propTypes = {\n//   id: PropTypes.string.isRequired,\n// };\n"],"names":["axios","API_KEY","fetchPopularMovies","response","data","results","fetchSearchMovie","query","fetchMovieDetails","id","fetchMovieCast","cast","fetchMovieReviews","CastList","styled","CastItem","CastImg","movieId","useParams","useState","setCast","useEffect","then","map","name","character","profile_path","src","alt","potoPlaceholder"],"sourceRoot":""}