{"version":3,"file":"static/js/736.b1cc701b.chunk.js","mappings":"0OAEaA,EAAWC,EAAAA,GAAAA,GAAH,iQAYRC,EAAWD,EAAAA,GAAAA,GAAH,kLAKRE,EAAUF,EAAAA,GAAAA,IAAH,kR,kBCgBpB,EA7Ba,SAAC,GAAY,IAAVG,EAAS,EAATA,GACd,GAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAKA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeL,GAAIM,KAAKH,EACzB,GAAE,CAACH,KAGF,8BACGE,IACC,SAACN,EAAD,UACGM,EAAKK,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcV,EAAlC,EAAkCA,GAAlC,OACR,UAACF,EAAD,WACGY,IACC,SAACX,EAAD,CACEY,IAAG,0CAAqCD,GACxCE,IAAKJ,KAGPE,IAAgB,SAACX,EAAD,CAASY,IAAKE,EAAiBD,IAAKJ,KACtD,uBAAIA,KACJ,uCAAeC,OATFT,EADP,OAiBnB,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 32px);\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\nexport const CastItem = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\nexport const CastImg = styled.img`\n  display: block;\n  max-width: 100%;\n  height: 460px;\n  width: 100%;\n  padding-bottom: 10px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchMovieCast } from 'api/api-movies';\nimport { useEffect } from 'react';\nimport { CastImg, CastItem, CastList } from './Cast.styled';\nimport potoPlaceholder from '../img/photo_placeholder.png';\nconst Cast = ({ id }) => {\n  const [cast, setCast] = useState(null);\n  useEffect(() => {\n    fetchMovieCast(id).then(setCast);\n  }, [id]);\n\n  return (\n    <>\n      {cast && (\n        <CastList>\n          {cast.map(({ name, character, profile_path, id }) => (\n            <CastItem key={id}>\n              {profile_path && (\n                <CastImg\n                  src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                  alt={name}\n                />\n              )}\n              {!profile_path && <CastImg src={potoPlaceholder} alt={name} />}\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </CastItem>\n          ))}\n        </CastList>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n"],"names":["CastList","styled","CastItem","CastImg","id","useState","cast","setCast","useEffect","fetchMovieCast","then","map","name","character","profile_path","src","alt","potoPlaceholder"],"sourceRoot":""}